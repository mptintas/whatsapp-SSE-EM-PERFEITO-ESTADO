# BACKUP CRIADO EM: 2025-03-24 17:12:00
# Total de arquivos: 3

# INÍCIO DO ARQUIVO: main.py (1/3) 
from WhatsApp_Manager import WhatsAppManager
from flask import Flask, render_template, request, jsonify, send_from_directory
import os
import logging

# Configuração de logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("app.log"), logging.StreamHandler()])
logger = logging.getLogger(__name__)

app = Flask(__name__, template_folder="templates", static_folder="static")

# Inicializa o gerenciador do WhatsApp
whatsapp_manager = WhatsAppManager()

# Rota para servir arquivos de mídia
@app.route('/media/<path:filename>')
def serve_media(filename):
    try:
        logger.info(f"Solicitação de mídia: {filename}")
        # Determina o tipo de mídia com base no caminho
        if filename.startswith('images/'):
            return send_from_directory('media', filename)
        elif filename.startswith('audio/'):
            return send_from_directory('media', filename)
        elif filename.startswith('video/'):
            return send_from_directory('media', filename)
        elif filename.startswith('documents/'):
            return send_from_directory('media', filename)
        else:
            logger.warning(f"Tipo de mídia não suportado: {filename}")
            return "Arquivo não encontrado", 404
    except Exception as e:
        logger.error(f"Erro ao servir mídia {filename}: {str(e)}")
        return "Erro ao servir mídia", 500

@app.route('/')
@app.route('/')
def index():
    try:
        # Renderiza a página inicial com as conversas existentes
        conversations = whatsapp_manager.conversations
        logger.info(f"Página inicial carregada com {len(conversations)} conversas")
        return render_template('index.html', conversations=conversations)
    except Exception as e:
        logger.error(f"Erro na página inicial: {str(e)}")
        return "Erro ao carregar a página", 500
    
@app.route('/conversation/<phone_number>')
def get_conversation(phone_number):
    try:
        # Retorna o histórico de mensagens de um número específico
        conversation = whatsapp_manager.get_conversation_history(phone_number)
        logger.info(f"Conversa solicitada: {phone_number}")
        return jsonify(conversation)
    except Exception as e:
        logger.error(f"Erro ao obter conversa {phone_number}: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/send_message', methods=['POST'])
def send_message():
    try:
        # Envia uma mensagem para um número via API do WhatsApp
        data = request.json
        to_number = data.get("to_number")
        message = data.get("message")
        media_path = data.get("media_path")
        media_type = data.get("media_type")
        
        logger.info(f"Enviando mensagem para {to_number}. Mídia: {media_type if media_type else 'Nenhuma'}")
        
        if media_path and media_type:
            success = whatsapp_manager.send_message_to_whatsapp(to_number, message, media_type, media_path)
        else:
            success = whatsapp_manager.send_message_to_whatsapp(to_number, message)
            
        if success:
            logger.info(f"Mensagem enviada com sucesso para {to_number}")
            return jsonify({"status": "success"}), 200
        else:
            logger.warning(f"Falha ao enviar mensagem para {to_number}")
            return jsonify({"status": "error"}), 500
    except Exception as e:
        logger.error(f"Erro ao enviar mensagem: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/toggle_mode/<phone_number>', methods=['POST'])
def toggle_conversation_mode(phone_number):
    try:
        # Alterna o modo da conversa entre automático e humano
        new_mode = whatsapp_manager.toggle_conversation_mode(phone_number)
        if new_mode:
            logger.info(f"Modo de conversa alterado para {phone_number}: {new_mode}")
            return jsonify({"status": "success", "mode": new_mode}), 200
        else:
            logger.warning(f"Conversa não encontrada para alternar modo: {phone_number}")
            return jsonify({"status": "error", "message": "Conversa não encontrada"}), 404
    except Exception as e:
        logger.error(f"Erro ao alternar modo de conversa: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/upload_media', methods=['POST'])
def upload_media():
    try:
        # Endpoint para fazer upload de mídia do cliente
        if 'file' not in request.files:
            logger.warning("Tentativa de upload sem arquivo")
            return jsonify({"status": "error", "message": "Nenhum arquivo enviado"}), 400
        
        file = request.files['file']
        if file.filename == '':
            logger.warning("Nome de arquivo vazio no upload")
            return jsonify({"status": "error", "message": "Nome de arquivo vazio"}), 400
        
        # Determinar o tipo de mídia
        if file.content_type.startswith('image/'):
            media_type = 'images'
        elif file.content_type.startswith('audio/'):
            media_type = 'audio'
        elif file.content_type.startswith('video/'):
            media_type = 'video'
        else:
            media_type = 'documents'
        
        # Salvar o arquivo
        filename = f"{file.filename}"
        media_dir = os.path.join('media', media_type)
        
        # Garantir que o diretório existe
        if not os.path.exists(media_dir):
            os.makedirs(media_dir)
            
        filepath = os.path.join(media_dir, filename)
        file.save(filepath)
        
        relative_path = os.path.join(media_type, filename)
        logger.info(f"Mídia carregada: {relative_path}")
        
        return jsonify({
            "status": "success", 
            "media_path": relative_path, 
            "media_type": media_type.rstrip('s')  # Remove o 's' para corresponder ao tipo da API
        }), 200
    except Exception as e:
        logger.error(f"Erro no upload de mídia: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/webhook', methods=['GET'])
def verify_webhook():
    try:
        # Verifica o webhook da Meta
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")

        if mode and token == whatsapp_manager.VERIFICATION_TOKEN:
            logger.info("Webhook verificado com sucesso!")
            return challenge, 200
        else:
            logger.warning("Verificação de webhook falhou: token inválido")
            return "Token inválido", 403
    except Exception as e:
        logger.error(f"Erro na verificação do webhook: {str(e)}")
        return "Erro na verificação", 500

@app.route('/webhook', methods=['POST'])
def webhook():
    # Processa mensagens recebidas via webhook
    try:
        data = request.json
        logger.info("Mensagem recebida via webhook")
        whatsapp_manager.handle_incoming_message(data)
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"Erro ao processar mensagem do webhook: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.after_request
def add_header(response):
    # Adiciona cabeçalhos para evitar cache
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Pragma"] = "no-cache"
    response.headers["Expires"] = "0"
    return response

if __name__ == "__main__":
    logger.info("Iniciando servidor Flask na porta 5000...")
    app.run(port=5000, debug=True)
# FIM DO ARQUIVO: main.py 

<!-- INÍCIO DO ARQUIVO: templates\index.html (2/3) -->
<script>
    // Defina as funções globais para que estejam disponíveis para os eventos inline
    function loadConversation(phone) {
        console.log("Carregando conversa:", phone);
        fetch('/conversation/' + phone)
            .then(response => response.json())
            .then(data => {
                console.log("Conversa carregada:", data);
                
                // Atualiza a interface com os dados da conversa
                document.getElementById('current-contact-name').textContent = data.name || "Cliente";
                
                // Limpa a área de mensagens
                const messageArea = document.getElementById('message-area');
                messageArea.innerHTML = '';
                
                // Se não tiver mensagens, mostra um estado vazio
                if (!data.messages || data.messages.length === 0) {
                    messageArea.innerHTML = '<div class="empty-state">Nenhuma mensagem encontrada</div>';
                    return;
                }
                
                // Renderiza as mensagens
                data.messages.forEach(msg => {
                    const messageElement = document.createElement('div');
                    messageElement.className = `message ${msg.from}`;
                    
                    // Conteúdo da mensagem
                    let content = '';
                    if (msg.type === 'text' || !msg.type) {
                        content = `<div class="message-text">${msg.content}</div>`;
                    } else if (msg.type === 'image') {
                        content = `
                            <div class="message-media">
                                <img src="/media/${msg.media_url}" alt="Imagem">
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'audio') {
                        content = `
                            <div class="message-media">
                                <audio controls src="/media/${msg.media_url}"></audio>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'video') {
                        content = `
                            <div class="message-media">
                                <video controls src="/media/${msg.media_url}"></video>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'document') {
                        const fileName = msg.media_url.split('/').pop();
                        content = `
                            <div class="message-document">
                                <a href="/media/${msg.media_url}" class="document-link" target="_blank">
                                    <i class="fas fa-file"></i> ${fileName}
                                </a>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    }
                    
                    messageElement.innerHTML = `
                        ${content}
                        <div class="message-time">${msg.timestamp || ''}</div>
                    `;
                    
                    messageArea.appendChild(messageElement);
                });
                
                // Rola para a última mensagem
                messageArea.scrollTop = messageArea.scrollHeight;
                
                // Guarda o número de telefone atual
                currentPhone = phone;
                
                // Atualiza o botão de modo
                const modeButton = document.getElementById('toggle-mode-btn');
                if (modeButton) {
                    modeButton.style.display = 'inline-block';
                    modeButton.className = data.mode === 'human' ? 'human-mode' : 'auto-mode';
                    modeButton.innerHTML = data.mode === 'human' ? 
                        '<i class="fas fa-user"></i> Modo Humano' : 
                        '<i class="fas fa-robot"></i> Modo Automático';
                }
                
                // Marca a conversa ativa na lista
                document.querySelectorAll('.conversation-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.getAttribute('data-phone') === phone) {
                        item.classList.add('active');
                    }
                });
            })
            .catch(error => {
                console.error("Erro ao carregar conversa:", error);
                alert("Erro ao carregar conversa: " + error.message);
            });
    }
    
    function sendMessage() {
        if (!currentPhone) {
            alert("Selecione uma conversa primeiro!");
            return;
        }
        
        const messageInput = document.getElementById('message-input');
        const message = messageInput.value.trim();
        
        if (!message && !mediaInfo) {
            alert("Digite uma mensagem ou selecione uma mídia!");
            return;
        }
        
        // Prepara os dados para envio
        const data = {
            to_number: currentPhone,
            message: message
        };
        
        // Adiciona informações de mídia se houver
        if (mediaInfo) {
            data.media_path = mediaInfo.path;
            data.media_type = mediaInfo.type;
        }
        
        // Desabilita o botão durante o envio
        const sendButton = document.getElementById('send-button');
        sendButton.disabled = true;
        
        // Envia a requisição
        fetch('/send_message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao enviar mensagem: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Limpa o campo de entrada e informações de mídia
                messageInput.value = '';
                mediaInfo = null;
                
                // Recarrega a conversa para mostrar a nova mensagem
                setTimeout(() => {
                    loadConversation(currentPhone);
                }, 500);
            } else {
                alert("Erro ao enviar mensagem: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao enviar mensagem:", error);
            alert("Erro ao enviar mensagem: " + error.message);
        })
        .finally(() => {
            sendButton.disabled = false;
        });
    }
    
    function toggleMode(phone) {
        if (!phone && !currentPhone) {
            alert("Selecione uma conversa primeiro!");
            return;
        }
        
        const phoneNumber = phone || currentPhone;
        
        // Desabilita o botão durante a operação
        const toggleButton = document.getElementById('toggle-mode-btn');
        if (toggleButton) toggleButton.disabled = true;
        
        fetch(`/toggle_mode/${phoneNumber}`, {
            method: 'POST'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao alterar modo: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Atualiza a interface com o novo modo
                const newMode = result.mode;
                
                if (toggleButton) {
                    toggleButton.className = newMode === 'human' ? 'human-mode' : 'auto-mode';
                    toggleButton.innerHTML = newMode === 'human' ? 
                        '<i class="fas fa-user"></i> Modo Humano' : 
                        '<i class="fas fa-robot"></i> Modo Automático';
                }
                    
                // Atualiza o ícone na lista de conversas
                const convoItem = document.querySelector(`.conversation-item[data-phone="${phoneNumber}"] .mode-toggle`);
                if (convoItem) {
                    convoItem.className = `mode-toggle ${newMode === 'human' ? 'human-mode' : 'auto-mode'}`;
                    convoItem.innerHTML = `<i class="fas ${newMode === 'human' ? 'fa-user' : 'fa-robot'}"></i>`;
                }
                
                alert("Modo alterado para: " + newMode);
                
                // Recarrega a conversa
                if (phoneNumber === currentPhone) {
                    loadConversation(phoneNumber);
                }
            } else {
                alert("Erro ao alterar modo: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao alterar modo:", error);
            alert("Erro ao alterar modo: " + error.message);
        })
        .finally(() => {
            if (toggleButton) toggleButton.disabled = false;
        });
    }
    
    function startNewConversation() {
        const phoneInput = document.getElementById('new-number');
        const phoneNumber = phoneInput.value.trim();
        
        if (!phoneNumber) {
            alert("Digite um número de telefone!");
            return;
        }
        
        // Verifica se a conversa já existe
        const existingConvo = document.querySelector(`.conversation-item[data-phone="${phoneNumber}"]`);
        if (existingConvo) {
            // Se já existe, apenas carrega
            loadConversation(phoneNumber);
            phoneInput.value = '';
            return;
        }
        
        // Define o número atual
        currentPhone = phoneNumber;
        
        // Limpa a entrada
        phoneInput.value = '';
        
        // Inicia a conversa (enviando uma mensagem vazia para criar a conversa)
        const messageInput = document.getElementById('message-input');
        messageInput.value = "Olá! Estou iniciando uma nova conversa.";
        
        // Envia a mensagem
        sendMessage();
    }
    
    function openMediaUpload(type) {
        // Configura o tipo de mídia
        mediaType = type;
        
        // Atualiza o título do modal
        const typeNames = {
            'image': 'Imagem',
            'audio': 'Áudio',
            'video': 'Vídeo',
            'document': 'Documento'
        };
        
        const uploadTitle = document.getElementById('upload-title');
        if (uploadTitle) {
            uploadTitle.textContent = `Enviar ${typeNames[type] || 'Mídia'}`;
        }
        
        // Configura o input de arquivo para aceitar o tipo correto
        const fileInput = document.getElementById('media-file');
        if (fileInput) {
            switch (type) {
                case 'image':
                    fileInput.accept = 'image/*';
                    break;
                case 'audio':
                    fileInput.accept = 'audio/*';
                    break;
                case 'video':
                    fileInput.accept = 'video/*';
                    break;
                case 'document':
                    fileInput.accept = '.pdf,.doc,.docx,.xls,.xlsx,.txt';
                    break;
            }
            
            // Limpa os campos
            fileInput.value = '';
        }
        
        const captionInput = document.getElementById('media-caption');
        if (captionInput) {
            captionInput.value = '';
        }
        
        // Abre o modal
        const modal = document.getElementById('media-upload-modal');
        if (modal) {
            modal.style.display = 'block';
        }
    }
    
    function uploadMedia() {
        if (!currentPhone) {
            alert("Selecione uma conversa primeiro!");
            closeModal();
            return;
        }
        
        const fileInput = document.getElementById('media-file');
        if (!fileInput || !fileInput.files[0]) {
            alert("Selecione um arquivo!");
            return;
        }
        
        const file = fileInput.files[0];
        
        // Cria um FormData para o upload
        const formData = new FormData();
        formData.append('file', file);
        
        // Desabilita o botão durante o upload
        const uploadButton = document.getElementById('upload-media-btn');
        if (uploadButton) uploadButton.disabled = true;
        
        // Faz o upload
        fetch('/upload_media', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao fazer upload: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Armazena as informações da mídia
                mediaInfo = {
                    path: result.media_path,
                    type: result.media_type
                };
                
                // Fecha o modal
                closeModal();
                
                // Preenche o campo de mensagem com a legenda (se houver)
                const caption = document.getElementById('media-caption');
                if (caption && caption.value.trim()) {
                    const messageInput = document.getElementById('message-input');
                    if (messageInput) {
                        messageInput.value = caption.value.trim();
                    }
                }
                
                // Notifica o usuário
                alert("Mídia pronta para envio! Clique em enviar para completar.");
            } else {
                alert("Erro ao fazer upload: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao fazer upload:", error);
            alert("Erro ao fazer upload: " + error.message);
        })
        .finally(() => {
            if (uploadButton) uploadButton.disabled = false;
        });
    }
    
    function closeModal() {
        const modal = document.getElementById('media-upload-modal');
        if (modal) {
            modal.style.display = 'none';
        }
    }
    
    function filterConversations() {
        const searchInput = document.getElementById('search-input');
        if (!searchInput) return;
        
        const searchText = searchInput.value.toLowerCase();
        const conversations = document.querySelectorAll('.conversation-item');
        
        conversations.forEach(convo => {
            const nameElement = convo.querySelector('.name');
            const phoneElement = convo.querySelector('.phone');
            
            if (!nameElement || !phoneElement) return;
            
            const name = nameElement.textContent.toLowerCase();
            const phone = phoneElement.textContent.toLowerCase();
            
            if (name.includes(searchText) || phone.includes(searchText)) {
                convo.style.display = 'flex';
            } else {
                convo.style.display = 'none';
            }
        });
    }
    
    // Variáveis globais para estado
    var currentPhone = null;
    var mediaType = null;
    var mediaInfo = null;
    
    // Log de diagnóstico
    console.log("Funções JavaScript definidas globalmente!");
    </script>
    <!-- FIM DO BLOCO A SER ADICIONADO -->
<!-- FIM DO ARQUIVO: templates\index.html -->

/* INÍCIO DO ARQUIVO: static\styles.css (3/3) */
/* Reset básico */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Estilo global */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f5f5;
    color: #333;
    display: flex;
    height: 100vh;
}

/* Container principal */
.container {
    display: flex;
    width: 100%;
    height: 100vh;
    overflow: hidden;
}

/* Coluna da esquerda (Lista de Conversas) */
.left-column {
    width: 25%;
    background-color: #ffffff;
    border-right: 1px solid #e0e0e0;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* Barra de busca */
.search-bar {
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
}

.search-bar input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    outline: none;
    transition: border-color 0.3s ease;
}

.search-bar input:focus {
    border-color: #007bff;
}

/* Nova conversa */
.new-conversation {
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.new-conversation input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    outline: none;
}

.new-conversation button {
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

.new-conversation button:hover {
    background-color: #0056b3;
}

/* Lista de conversas */
.conversation-list {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
}

.conversation-item {
    display: flex;
    align-items: center;
    padding: 12px;
    margin-bottom: 5px;
    border-radius: 8px;
    cursor: pointer;
    background-color: #fafafa;
    transition: background-color 0.3s ease;
}

.conversation-item:hover {
    background-color: #f0f0f0;
}

.conversation-item.active {
    background-color: #e3f2fd;
}

.conversation-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 12px;
    background-color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
}

.conversation-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #4e9af1;
    color: white;
    font-weight: bold;
    font-size: 18px;
}

.conversation-info {
    flex: 1;
    overflow: hidden;
}

.conversation-info .name {
    font-weight: bold;
    font-size: 14px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.conversation-info .phone {
    font-size: 12px;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.conversation-mode {
    margin-left: 8px;
}

.mode-toggle {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.mode-toggle.human-mode {
    background-color: #4CAF50;
    color: white;
}

.mode-toggle.auto-mode {
    background-color: #9e9e9e;
    color: white;
}

/* Coluna central (Conversa Atual) */
.center-column {
    width: 50%;
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    border-right: 1px solid #e0e0e0;
    position: relative;
}

/* Coluna da direita (Visualização da IA) */
.right-column {
    width: 25%;
    background-color: #f9f9f9;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* Cabeçalho para ambas as colunas */
.header {
    padding: 15px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #fff;
}

/* Info de contato no cabeçalho */
.contact-info {
    display: flex;
    align-items: center;
}

.contact-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 12px;
}

.contact-name {
    font-weight: bold;
    font-size: 16px;
}

/* Ações de conversa */
.conversation-actions button {
    padding: 8px 12px;
    border: none;
    border-radius: 8px;
    background-color: #f0f0f0;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: background-color 0.3s ease;
}

.conversation-actions button:hover {
    background-color: #e0e0e0;
}

.conversation-actions button.human-mode {
    background-color: #e8f5e9;
    color: #2e7d32;
}

.conversation-actions button.auto-mode {
    background-color: #f5f5f5;
    color: #616161;
}

/* Título da área de IA */
.ai-title {
    font-weight: bold;
    font-size: 16px;
    color: #333;
}

/* Áreas de mensagem */
.message-area, .ai-message-area {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    background-color: #f7f7f7;
    display: flex;
    flex-direction: column;
}

/* Estilo para área vazia */
.empty-state {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #888;
    font-size: 14px;
    text-align: center;
    padding: 20px;
}

/* Mensagens */
.message {
    max-width: 70%;
    padding: 10px 15px;
    border-radius: 12px;
    margin-bottom: 10px;
    font-size: 14px;
    line-height: 1.4;
    position: relative;
    word-wrap: break-word;
}

.message.cliente {
    align-self: flex-end;
    background-color: #dcf8c6;
    margin-left: auto;
}

.message.vendedor, .message.qwen, .message.deepseek {
    align-self: flex-start;
    background-color: white;
    margin-right: auto;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.message.vendedor {
    border-left: 3px solid #2196F3;
}

.message.qwen, .message.deepseek {
    border-left: 3px solid #9C27B0;
}

/* Conteúdo das mensagens */
.message-text {
    margin-bottom: 6px;
}

.message-time {
    font-size: 11px;
    color: #999;
    text-align: right;
    margin-top: 5px;
}

.message-media {
    max-width: 100%;
    margin-bottom: 8px;
}

.message-media img {
    max-width: 100%;
    border-radius: 8px;
}

.message-media video, .message-media audio {
    max-width: 100%;
    border-radius: 4px;
}

.message-caption {
    font-size: 13px;
    margin-top: 4px;
    color: #444;
}

.message-document {
    display: flex;
    align-items: center;
    background-color: rgba(0,0,0,0.05);
    padding: 8px;
    border-radius: 5px;
    margin-bottom: 6px;
}

.document-link {
    display: flex;
    align-items: center;
    color: #1565C0;
    text-decoration: none;
    font-size: 13px;
}

.document-link i {
    margin-right: 6px;
    font-size: 20px;
}

/* Área de envio de mensagem */
.input-area {
    padding: 10px 15px;
    border-top: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    gap: 10px;
    background-color: #fff;
}

.media-buttons {
    display: flex;
    gap: 5px;
}

.media-btn {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background-color: #f0f0f0;
    color: #555;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.media-btn:hover {
    background-color: #e0e0e0;
}

.input-area textarea {
    flex: 1;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    font-size: 14px;
    resize: none;
    height: 40px;
    max-height: 120px;
    outline: none;
    transition: border-color 0.3s ease;
}

.input-area textarea:focus {
    border-color: #007bff;
}

.input-area button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background-color: #007bff;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.input-area button:hover {
    background-color: #0056b3;
}

/* Modal de upload de mídia */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    overflow: auto;
}

.modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    border-radius: 10px;
    width: 50%;
    max-width: 500px;
    position: relative;
}

.close {
    position: absolute;
    right: 15px;
    top: 10px;
    font-size: 28px;
    font-weight: bold;
    color: #aaa;
    cursor: pointer;
}

.close:hover {
    color: #555;
}

#media-upload-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
}

#media-file {
    border: 1px dashed #ccc;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
}

#media-caption {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    resize: none;
    height: 80px;
    font-size: 14px;
    outline: none;
}

#media-upload-form button {
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

#media-upload-form button:hover {
    background-color: #0056b3;
}

/* Responsividade */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
    
    .left-column, .center-column, .right-column {
        width: 100%;
        height: auto;
    }
    
    .left-column {
        height: 30vh;
    }
    
    .center-column {
        height: 70vh;
    }
    
    .right-column {
        display: none; /* Oculta a coluna direita em telas pequenas */
    }
    
    .modal-content {
        width: 90%;
    }
}
/* FIM DO ARQUIVO: static\styles.css */

# FIM DO BACKUP - 2025-03-24 17:12:00
