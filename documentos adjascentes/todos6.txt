# BACKUP CRIADO EM: 2025-03-24 16:38:05
# Total de arquivos: 6

# INÍCIO DO ARQUIVO: main.py (1/6) 
from WhatsApp_Manager import WhatsAppManager
from flask import Flask, render_template, request, jsonify, send_from_directory
import os
import logging

# Configuração de logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("app.log"), logging.StreamHandler()])
logger = logging.getLogger(__name__)

app = Flask(__name__, template_folder="templates", static_folder="static")

# Inicializa o gerenciador do WhatsApp
whatsapp_manager = WhatsAppManager()

# Rota para servir arquivos de mídia
@app.route('/media/<path:filename>')
def serve_media(filename):
    try:
        logger.info(f"Solicitação de mídia: {filename}")
        # Determina o tipo de mídia com base no caminho
        if filename.startswith('images/'):
            return send_from_directory('media', filename)
        elif filename.startswith('audio/'):
            return send_from_directory('media', filename)
        elif filename.startswith('video/'):
            return send_from_directory('media', filename)
        elif filename.startswith('documents/'):
            return send_from_directory('media', filename)
        else:
            logger.warning(f"Tipo de mídia não suportado: {filename}")
            return "Arquivo não encontrado", 404
    except Exception as e:
        logger.error(f"Erro ao servir mídia {filename}: {str(e)}")
        return "Erro ao servir mídia", 500

@app.route('/')
@app.route('/')
def index():
    try:
        # Renderiza a página inicial com as conversas existentes
        conversations = whatsapp_manager.conversations
        logger.info(f"Página inicial carregada com {len(conversations)} conversas")
        return render_template('index.html', conversations=conversations)
    except Exception as e:
        logger.error(f"Erro na página inicial: {str(e)}")
        return "Erro ao carregar a página", 500
def get_conversation(phone_number):
    try:
        # Retorna o histórico de mensagens de um número específico
        conversation = whatsapp_manager.get_conversation_history(phone_number)
        logger.info(f"Conversa solicitada: {phone_number}")
        return jsonify(conversation)
    except Exception as e:
        logger.error(f"Erro ao obter conversa {phone_number}: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/send_message', methods=['POST'])
def send_message():
    try:
        # Envia uma mensagem para um número via API do WhatsApp
        data = request.json
        to_number = data.get("to_number")
        message = data.get("message")
        media_path = data.get("media_path")
        media_type = data.get("media_type")
        
        logger.info(f"Enviando mensagem para {to_number}. Mídia: {media_type if media_type else 'Nenhuma'}")
        
        if media_path and media_type:
            success = whatsapp_manager.send_message_to_whatsapp(to_number, message, media_type, media_path)
        else:
            success = whatsapp_manager.send_message_to_whatsapp(to_number, message)
            
        if success:
            logger.info(f"Mensagem enviada com sucesso para {to_number}")
            return jsonify({"status": "success"}), 200
        else:
            logger.warning(f"Falha ao enviar mensagem para {to_number}")
            return jsonify({"status": "error"}), 500
    except Exception as e:
        logger.error(f"Erro ao enviar mensagem: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/toggle_mode/<phone_number>', methods=['POST'])
def toggle_conversation_mode(phone_number):
    try:
        # Alterna o modo da conversa entre automático e humano
        new_mode = whatsapp_manager.toggle_conversation_mode(phone_number)
        if new_mode:
            logger.info(f"Modo de conversa alterado para {phone_number}: {new_mode}")
            return jsonify({"status": "success", "mode": new_mode}), 200
        else:
            logger.warning(f"Conversa não encontrada para alternar modo: {phone_number}")
            return jsonify({"status": "error", "message": "Conversa não encontrada"}), 404
    except Exception as e:
        logger.error(f"Erro ao alternar modo de conversa: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/upload_media', methods=['POST'])
def upload_media():
    try:
        # Endpoint para fazer upload de mídia do cliente
        if 'file' not in request.files:
            logger.warning("Tentativa de upload sem arquivo")
            return jsonify({"status": "error", "message": "Nenhum arquivo enviado"}), 400
        
        file = request.files['file']
        if file.filename == '':
            logger.warning("Nome de arquivo vazio no upload")
            return jsonify({"status": "error", "message": "Nome de arquivo vazio"}), 400
        
        # Determinar o tipo de mídia
        if file.content_type.startswith('image/'):
            media_type = 'images'
        elif file.content_type.startswith('audio/'):
            media_type = 'audio'
        elif file.content_type.startswith('video/'):
            media_type = 'video'
        else:
            media_type = 'documents'
        
        # Salvar o arquivo
        filename = f"{file.filename}"
        media_dir = os.path.join('media', media_type)
        
        # Garantir que o diretório existe
        if not os.path.exists(media_dir):
            os.makedirs(media_dir)
            
        filepath = os.path.join(media_dir, filename)
        file.save(filepath)
        
        relative_path = os.path.join(media_type, filename)
        logger.info(f"Mídia carregada: {relative_path}")
        
        return jsonify({
            "status": "success", 
            "media_path": relative_path, 
            "media_type": media_type.rstrip('s')  # Remove o 's' para corresponder ao tipo da API
        }), 200
    except Exception as e:
        logger.error(f"Erro no upload de mídia: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/webhook', methods=['GET'])
def verify_webhook():
    try:
        # Verifica o webhook da Meta
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")

        if mode and token == whatsapp_manager.VERIFICATION_TOKEN:
            logger.info("Webhook verificado com sucesso!")
            return challenge, 200
        else:
            logger.warning("Verificação de webhook falhou: token inválido")
            return "Token inválido", 403
    except Exception as e:
        logger.error(f"Erro na verificação do webhook: {str(e)}")
        return "Erro na verificação", 500

@app.route('/webhook', methods=['POST'])
def webhook():
    # Processa mensagens recebidas via webhook
    try:
        data = request.json
        logger.info("Mensagem recebida via webhook")
        whatsapp_manager.handle_incoming_message(data)
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"Erro ao processar mensagem do webhook: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.after_request
def add_header(response):
    # Adiciona cabeçalhos para evitar cache
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Pragma"] = "no-cache"
    response.headers["Expires"] = "0"
    return response

if __name__ == "__main__":
    logger.info("Iniciando servidor Flask na porta 5000...")
    app.run(port=5000, debug=True)
# FIM DO ARQUIVO: main.py 

# INÍCIO DO ARQUIVO: WhatsApp_Manager.py (2/6) 
import requests
import os
import json
from datetime import datetime
from qwen1 import process_message
from media_handler import MediaHandler

class WhatsAppManager:
    def __init__(self):
        self.VERIFICATION_TOKEN = "EAAJjZBmxpkYgBOyEx31oz53K3694dZCg81dZA17ym3W9rCFjmax29HMwcdgq8iZBawUoNw1vzTlYSGAbIWTN4MRkWZBA0wMpwfLfI6dHaaMyhUZC1qZADUbZBZCNMhOw8a0AI2sBHpBLtbEbMrhBGZBNh81teK7z0ZBX338LZBTHRXYr96YTytPiv1JRD5Vyiis5pl5yhpUHzjHDhgZDZD"
        self.WHATSAPP_TOKEN = "EAAJjZBmxpkYgBOyEx31oz53K3694dZCg81dZA17ym3W9rCFjmax29HMwcdgq8iZBawUoNw1vzTlYSGAbIWTN4MRkWZBA0wMpwfLfI6dHaaMyhUZC1qZADUbZBZCNMhOw8a0AI2sBHpBLtbEbMrhBGZBNh81teK7z0ZBX338LZBTHRXYr96YTytPiv1JRD5Vyiis5pl5yhpUHzjHDhgZDZD"
        self.PHONE_NUMBER_ID = "637338086121702"
        self.conversations = {}
        self.CONVERSATION_DIR = "conversations"
        self.media_handler = MediaHandler()
        
        if not os.path.exists(self.CONVERSATION_DIR):
            os.makedirs(self.CONVERSATION_DIR)
        self.load_conversations()

    def load_conversations(self):
        if not os.path.exists(self.CONVERSATION_DIR):
            os.makedirs(self.CONVERSATION_DIR)
            print("Diretório de conversas criado.")
            return
            
        try:
            for filename in os.listdir(self.CONVERSATION_DIR):
                if filename.endswith('.json'):
                    phone_number = filename.split(".")[0]
                    filepath = os.path.join(self.CONVERSATION_DIR, filename)
                    try:
                        with open(filepath, "r", encoding='utf-8') as file:
                            data = json.load(file)
                            
                            # Converte formato antigo para novo formato se necessário
                            if "messages" in data and isinstance(data["messages"], list):
                                self.conversations[phone_number] = {
                                    "name": data.get("name", "Cliente"),
                                    "profile_pic": data.get("profile_pic", ""),
                                    "mode": data.get("mode", "auto"),
                                    "messages": []
                                }
                                
                                for msg in data["messages"]:
                                    if "text" in msg and "type" not in msg:
                                        self.conversations[phone_number]["messages"].append({
                                            "type": "text",
                                            "content": msg["text"],
                                            "from": msg["from"],
                                            "timestamp": msg.get("timestamp", datetime.now().strftime("%H:%M %d/%m/%y"))
                                        })
                                    else:
                                        self.conversations[phone_number]["messages"].append(msg)
                            else:
                                self.conversations[phone_number] = data
                            
                            if "mode" not in self.conversations[phone_number]:
                                self.conversations[phone_number]["mode"] = "auto"
                    except Exception as e:
                        print(f"Erro ao carregar arquivo {filepath}: {str(e)}")
                        continue
                        
            print(f"{len(self.conversations)} conversas carregadas.")
        except Exception as e:
            print(f"Erro ao carregar conversas: {str(e)}")

    def save_conversation(self, phone_number):
        try:
            if not os.path.exists(self.CONVERSATION_DIR):
                os.makedirs(self.CONVERSATION_DIR)
                
            filepath = os.path.join(self.CONVERSATION_DIR, f"{phone_number}.json")
            with open(filepath, "w", encoding='utf-8') as file:
                json.dump(self.conversations.get(phone_number, {}), file, indent=4, ensure_ascii=False)
            print(f"Conversa com {phone_number} salva.")
        except Exception as e:
            print(f"Erro ao salvar conversa: {str(e)}")

    def handle_incoming_message(self, data):
        try:
            print(f"Dados recebidos via webhook: {data}")
            if "messages" in data.get("entry", [{}])[0].get("changes", [{}])[0].get("value", {}):
                phone_number = data.get("entry", [{}])[0].get("changes", [{}])[0].get("value", {}).get("contacts", [{}])[0].get("wa_id", "")
                client_name = data.get("entry", [{}])[0].get("changes", [{}])[0].get("value", {}).get("contacts", [{}])[0].get("profile", {}).get("name", "Desconhecido")
                
                if phone_number not in self.conversations:
                    self.conversations[phone_number] = {
                        "name": client_name,
                        "profile_pic": "",
                        "mode": "auto",
                        "messages": []
                    }
                
                message = data.get("entry", [{}])[0].get("changes", [{}])[0].get("value", {}).get("messages", [{}])[0]
                
                profile_pic = data.get("entry", [{}])[0].get("changes", [{}])[0].get("value", {}).get("contacts", [{}])[0].get("profile", {}).get("profile_picture", "")
                if profile_pic:
                    self.conversations[phone_number]["profile_pic"] = profile_pic
                
                message_type = message.get("type", "")
                message_content = None
                media_url = None
                
                if message_type == "text":
                    message_content = message.get("text", {}).get("body", "")
                    media_url = None
                    message_obj = {
                        "type": "text",
                        "content": message_content,
                        "from": "cliente",
                        "timestamp": datetime.now().strftime("%H:%M %d/%m/%y")
                    }
                    
                elif message_type in ["image", "audio", "video", "document"]:
                    media_id = message.get(message_type, {}).get("id", "")
                    media_url = self.media_handler.download_media(media_id, self.WHATSAPP_TOKEN)
                    caption = message.get(message_type, {}).get("caption", "")
                    
                    message_obj = {
                        "type": message_type,
                        "content": caption,
                        "media_url": media_url,
                        "from": "cliente",
                        "timestamp": datetime.now().strftime("%H:%M %d/%m/%y")
                    }
                else:
                    print(f"Tipo de mensagem desconhecido: {message_type}")
                    return
                
                self.conversations[phone_number]["messages"].append(message_obj)
                self.save_conversation(phone_number)
                
                print(f"Mensagem do cliente {client_name} ({phone_number}) recebida: Tipo={message_type}")
                
                if self.conversations[phone_number]["mode"] == "auto":
                    resposta_qwen = None
                    if message_type == "text":
                        resposta_qwen = process_message(message_content, phone_number)
                    else:
                        media_desc = f"[Cliente enviou {message_type}]"
                        if caption:
                            media_desc += f" com a legenda: '{caption}'"
                        resposta_qwen = process_message(media_desc, phone_number)
                    
                    if resposta_qwen:
                        self.send_message_to_whatsapp(phone_number, resposta_qwen)

        except Exception as e:
            print(f"Erro ao processar mensagem: {str(e)}")
            import traceback
            traceback.print_exc()

    def send_message_to_whatsapp(self, to_number, message, media_type=None, media_path=None):
        try:
            url = f"https://graph.facebook.com/v16.0/{self.PHONE_NUMBER_ID}/messages"
            headers = {
                "Authorization": f"Bearer {self.WHATSAPP_TOKEN}",
                "Content-Type": "application/json"
            }
            
            if media_type is None:
                payload = {
                    "messaging_product": "whatsapp",
                    "to": to_number,
                    "type": "text",
                    "text": {
                        "body": message
                    }
                }
            else:
                media_id = self.media_handler.upload_media(media_path, self.WHATSAPP_TOKEN)
                payload = {
                    "messaging_product": "whatsapp",
                    "to": to_number,
                    "type": media_type,
                    media_type: {
                        "id": media_id,
                        "caption": message
                    }
                }
            
            response = requests.post(url, json=payload, headers=headers)
            if response.status_code == 200:
                print(f"Mensagem enviada com sucesso para {to_number}")
                
                timestamp = datetime.now().strftime("%H:%M %d/%m/%y")
                if to_number not in self.conversations:
                    self.conversations[to_number] = {
                        "name": "Desconhecido",
                        "profile_pic": "",
                        "mode": "auto",
                        "messages": []
                    }
                
                sender = "qwen" if self.conversations[to_number]["mode"] == "auto" else "vendedor"
                
                if media_type is None:
                    self.conversations[to_number]["messages"].append({
                        "type": "text",
                        "content": message,
                        "from": sender,
                        "timestamp": timestamp
                    })
                else:
                    self.conversations[to_number]["messages"].append({
                        "type": media_type,
                        "content": message,
                        "media_url": media_path,
                        "from": sender,
                        "timestamp": timestamp
                    })
                
                self.save_conversation(to_number)
                return True
            else:
                print(f"Falha ao enviar mensagem para {to_number}: {response.text}")
                return False
        except Exception as e:
            print(f"Erro ao enviar mensagem: {str(e)}")
            import traceback
            traceback.print_exc()
            return False

    def get_conversation_history(self, phone_number):
        return self.conversations.get(phone_number, {})
    
    def toggle_conversation_mode(self, phone_number):
        if phone_number in self.conversations:
            current_mode = self.conversations[phone_number].get("mode", "auto")
            new_mode = "human" if current_mode == "auto" else "auto"
            self.conversations[phone_number]["mode"] = new_mode
            self.save_conversation(phone_number)
            print(f"Modo da conversa com {phone_number} alterado para: {new_mode}")
            return new_mode
        print(f"Tentativa de alternar modo para número inexistente: {phone_number}")
        return None
# FIM DO ARQUIVO: WhatsApp_Manager.py 

# INÍCIO DO ARQUIVO: Webhook_Server.py (3/6) 
from flask import Flask, request, jsonify, render_template

class WebhookServer:
    def __init__(self, whatsapp_manager):
        self.app = Flask(__name__)
        self.whatsapp_manager = whatsapp_manager
        self.setup_routes()

    def setup_routes(self):
        @self.app.route('/')
        def index():
            conversations = self.whatsapp_manager.conversations
            return render_template('index.html', conversations=conversations)

        @self.app.route('/webhook', methods=['GET'])
        def verify_webhook():
            mode = request.args.get("hub.mode")
            token = request.args.get("hub.verify_token")
            challenge = request.args.get("hub.challenge")

            if mode and token == self.whatsapp_manager.VERIFICATION_TOKEN:
                print("Webhook verificado com sucesso!")
                return challenge, 200
            else:
                print("Token inválido!")
                return "Token inválido", 403

        @self.app.route('/webhook', methods=['POST'])
        def webhook():
            try:
                data = request.json
                print(f"Mensagem recebida via webhook: {data}")
                self.whatsapp_manager.handle_incoming_message(data)
                return jsonify({"status": "ok"}), 200
            except Exception as e:
                print(f"Erro ao processar mensagem do webhook: {str(e)}")
                return jsonify({"status": "error", "message": str(e)}), 500

    def run(self, port=5000):
        print(f"Iniciando servidor webhook na porta {port}...")
        self.app.run(port=port)
# FIM DO ARQUIVO: Webhook_Server.py 

# INÍCIO DO ARQUIVO: media_handler.py (4/6) 
import os
import requests
import mimetypes
from datetime import datetime

class MediaHandler:
    def __init__(self):
        self.MEDIA_DIR = "media"
        if not os.path.exists(self.MEDIA_DIR):
            os.makedirs(self.MEDIA_DIR)
            os.makedirs(os.path.join(self.MEDIA_DIR, "images"))
            os.makedirs(os.path.join(self.MEDIA_DIR, "audio"))
            os.makedirs(os.path.join(self.MEDIA_DIR, "video"))
            os.makedirs(os.path.join(self.MEDIA_DIR, "documents"))
    
    def download_media(self, media_id, whatsapp_token):
        try:
            url = f"https://graph.facebook.com/v16.0/{media_id}"
            headers = {
                "Authorization": f"Bearer {whatsapp_token}"
            }
            
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"Erro ao obter URL da mídia: {response.text}")
                return None
            
            media_data = response.json()
            media_url = media_data.get("url")
            mime_type = media_data.get("mime_type", "application/octet-stream")
            
            response = requests.get(media_url, headers=headers)
            if response.status_code != 200:
                print(f"Erro ao baixar mídia: {response.status_code}")
                return None
            
            extension = mimetypes.guess_extension(mime_type) or ""
            media_type = self._get_media_type(mime_type)
            
            media_dir_path = os.path.join(self.MEDIA_DIR, media_type)
            if not os.path.exists(media_dir_path):
                os.makedirs(media_dir_path)
            
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            filename = f"{media_id}_{timestamp}{extension}"
            filepath = os.path.join(media_dir_path, filename)
            
            with open(filepath, 'wb') as f:
                f.write(response.content)
                
            print(f"Mídia salva em: {filepath}")
            return os.path.join(media_type, filename)
        
        except Exception as e:
            print(f"Erro ao baixar mídia: {str(e)}")
            import traceback
            traceback.print_exc()
            return None
    
    def upload_media(self, media_path, whatsapp_token):
        try:
            url = "https://graph.facebook.com/v16.0/media"
            
            full_path = os.path.join(self.MEDIA_DIR, media_path) if not media_path.startswith(self.MEDIA_DIR) else media_path
            if not os.path.exists(full_path):
                print(f"Arquivo não encontrado: {full_path}")
                return None
            
            mime_type, _ = mimetypes.guess_type(full_path)
            if not mime_type:
                ext = os.path.splitext(full_path)[1].lower()
                if ext in ['.jpg', '.jpeg']:
                    mime_type = 'image/jpeg'
                elif ext == '.png':
                    mime_type = 'image/png'
                elif ext == '.mp3':
                    mime_type = 'audio/mpeg'
                elif ext == '.mp4':
                    mime_type = 'video/mp4'
                elif ext == '.pdf':
                    mime_type = 'application/pdf'
                else:
                    mime_type = 'application/octet-stream'
            
            with open(full_path, 'rb') as media_file:
                files = {
                    'file': (os.path.basename(full_path), media_file, mime_type)
                }
                
                data = {
                    'messaging_product': 'whatsapp'
                }
                
                headers = {
                    'Authorization': f'Bearer {whatsapp_token}'
                }
                
                response = requests.post(url, headers=headers, data=data, files=files)
                
                if response.status_code == 200:
                    media_id = response.json().get('id')
                    print(f"Mídia enviada com sucesso. ID: {media_id}")
                    return media_id
                else:
                    print(f"Erro ao enviar mídia: {response.text}")
                    return None
                
        except Exception as e:
            print(f"Erro ao enviar mídia: {str(e)}")
            import traceback
            traceback.print_exc()
            return None
    
    def _get_media_type(self, mime_type):
        if mime_type.startswith('image/'):
            return "images"
        elif mime_type.startswith('audio/'):
            return "audio"
        elif mime_type.startswith('video/'):
            return "video"
        else:
            return "documents"
# FIM DO ARQUIVO: media_handler.py 

# INÍCIO DO ARQUIVO: qwen1.py (5/6) 
import json
import os
import requests
from datetime import datetime

# Variável InputWhats
InputWhats = ""

def ler_arquivo(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            return arquivo.read()
    except FileNotFoundError:
        print(f"Arquivo {nome_arquivo} não encontrado.")
        return ""
    except Exception as e:
        print(f"Erro ao ler o arquivo {nome_arquivo}: {e}")
        return ""

def salvar_historico(phone_number, historico):
    try:
        with open(f'conversations/{phone_number}.json', 'w', encoding='utf-8') as arquivo:
            json.dump(historico, arquivo, ensure_ascii=False, indent=4)
        print(f"Histórico da conversa com {phone_number} salvo.")
    except Exception as e:
        print(f"Erro ao salvar o histórico: {e}")

def enviar_para_deepseek(prompt):
    API_KEY = "sk-8505379415ba47f39c1694ca1ebdd6a2"
    URL = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.8,
        "max_tokens": 6000
    }

    try:
        response = requests.post(URL, headers=headers, json=data)
        response.raise_for_status()
        return response.json().get("choices", [{}])[0].get("message", {}).get("content", "")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar solicitação para a API do DeepSeek: {e}")
        return None

def process_message(message, phone_number):
    global InputWhats
    InputWhats = message

    instrucao_fixa = ler_arquivo("instrucaoFixa.txt")
    dados = ler_arquivo("Dados.txt")

    historico_conversa = []
    historico_file = f"conversations/{phone_number}.json"
    if os.path.exists(historico_file):
        with open(historico_file, 'r', encoding='utf-8') as arquivo:
            historico_conversa = json.load(arquivo).get("messages", [])
    else:
        historico_conversa = ["Primeiro Contato Deste Cliente"]

    InputDeepSeek = f"{InputWhats}\n\n{instrucao_fixa}\n\n{dados}\n\nHistórico:\n{json.dumps(historico_conversa, ensure_ascii=False, indent=4)}"

    resposta_deepseek = enviar_para_deepseek(InputDeepSeek)

    if resposta_deepseek is not None:
        print("Resposta do DeepSeek:", resposta_deepseek)

        nova_mensagem = {
            "type": "text",
            "content": message,
            "from": "cliente",
            "timestamp": datetime.now().strftime("%H:%M %d/%m/%y")
        }
        
        nova_resposta = {
            "type": "text",
            "content": resposta_deepseek,
            "from": "deepseek",
            "timestamp": datetime.now().strftime("%H:%M %d/%m/%y")
        }

        if os.path.exists(historico_file):
            with open(historico_file, 'r', encoding='utf-8') as arquivo:
                historico_existente = json.load(arquivo)
        else:
            historico_existente = {"messages": []}

        if "messages" not in historico_existente:
            historico_existente["messages"] = []
            
        historico_existente["messages"].extend([nova_mensagem, nova_resposta])

        salvar_historico(phone_number, historico_existente)

        return resposta_deepseek
    else:
        print("Não foi possível obter uma resposta do DeepSeek.")
        return None
# FIM DO ARQUIVO: qwen1.py 

<!-- INÍCIO DO ARQUIVO: templates\index.html (6/6) -->
<!-- COPIE ESTE BLOCO DE CÓDIGO E COLOQUE-O NO INÍCIO DO SEU ARQUIVO index.html, LOGO APÓS A TAG <body> -->

<!-- INÍCIO DO BLOCO A SER ADICIONADO -->
<script>
    // Defina as funções globais para que estejam disponíveis para os eventos inline
    function loadConversation(phone) {
        console.log("Carregando conversa:", phone);
        fetch('/conversation/' + phone)
            .then(response => response.json())
            .then(data => {
                console.log("Conversa carregada:", data);
                
                // Atualiza a interface com os dados da conversa
                document.getElementById('current-contact-name').textContent = data.name || "Cliente";
                
                // Limpa a área de mensagens
                const messageArea = document.getElementById('message-area');
                messageArea.innerHTML = '';
                
                // Se não tiver mensagens, mostra um estado vazio
                if (!data.messages || data.messages.length === 0) {
                    messageArea.innerHTML = '<div class="empty-state">Nenhuma mensagem encontrada</div>';
                    return;
                }
                
                // Renderiza as mensagens
                data.messages.forEach(msg => {
                    const messageElement = document.createElement('div');
                    messageElement.className = `message ${msg.from}`;
                    
                    // Conteúdo da mensagem
                    let content = '';
                    if (msg.type === 'text' || !msg.type) {
                        content = `<div class="message-text">${msg.content}</div>`;
                    } else if (msg.type === 'image') {
                        content = `
                            <div class="message-media">
                                <img src="/media/${msg.media_url}" alt="Imagem">
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'audio') {
                        content = `
                            <div class="message-media">
                                <audio controls src="/media/${msg.media_url}"></audio>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'video') {
                        content = `
                            <div class="message-media">
                                <video controls src="/media/${msg.media_url}"></video>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    } else if (msg.type === 'document') {
                        const fileName = msg.media_url.split('/').pop();
                        content = `
                            <div class="message-document">
                                <a href="/media/${msg.media_url}" class="document-link" target="_blank">
                                    <i class="fas fa-file"></i> ${fileName}
                                </a>
                            </div>
                            ${msg.content ? `<div class="message-caption">${msg.content}</div>` : ''}
                        `;
                    }
                    
                    messageElement.innerHTML = `
                        ${content}
                        <div class="message-time">${msg.timestamp || ''}</div>
                    `;
                    
                    messageArea.appendChild(messageElement);
                });
                
                // Rola para a última mensagem
                messageArea.scrollTop = messageArea.scrollHeight;
                
                // Guarda o número de telefone atual
                currentPhone = phone;
                
                // Atualiza o botão de modo
                const modeButton = document.getElementById('toggle-mode-btn');
                if (modeButton) {
                    modeButton.style.display = 'inline-block';
                    modeButton.className = data.mode === 'human' ? 'human-mode' : 'auto-mode';
                    modeButton.innerHTML = data.mode === 'human' ? 
                        '<i class="fas fa-user"></i> Modo Humano' : 
                        '<i class="fas fa-robot"></i> Modo Automático';
                }
                
                // Marca a conversa ativa na lista
                document.querySelectorAll('.conversation-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.getAttribute('data-phone') === phone) {
                        item.classList.add('active');
                    }
                });
            })
            .catch(error => {
                console.error("Erro ao carregar conversa:", error);
                alert("Erro ao carregar conversa: " + error.message);
            });
    }
    
    function sendMessage() {
        if (!currentPhone) {
            alert("Selecione uma conversa primeiro!");
            return;
        }
        
        const messageInput = document.getElementById('message-input');
        const message = messageInput.value.trim();
        
        if (!message && !mediaInfo) {
            alert("Digite uma mensagem ou selecione uma mídia!");
            return;
        }
        
        // Prepara os dados para envio
        const data = {
            to_number: currentPhone,
            message: message
        };
        
        // Adiciona informações de mídia se houver
        if (mediaInfo) {
            data.media_path = mediaInfo.path;
            data.media_type = mediaInfo.type;
        }
        
        // Desabilita o botão durante o envio
        const sendButton = document.getElementById('send-button');
        sendButton.disabled = true;
        
        // Envia a requisição
        fetch('/send_message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao enviar mensagem: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Limpa o campo de entrada e informações de mídia
                messageInput.value = '';
                mediaInfo = null;
                
                // Recarrega a conversa para mostrar a nova mensagem
                setTimeout(() => {
                    loadConversation(currentPhone);
                }, 500);
            } else {
                alert("Erro ao enviar mensagem: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao enviar mensagem:", error);
            alert("Erro ao enviar mensagem: " + error.message);
        })
        .finally(() => {
            sendButton.disabled = false;
        });
    }
    
    function toggleMode(phone) {
        if (!phone && !currentPhone) {
            alert("Selecione uma conversa primeiro!");
            return;
        }
        
        const phoneNumber = phone || currentPhone;
        
        // Desabilita o botão durante a operação
        const toggleButton = document.getElementById('toggle-mode-btn');
        if (toggleButton) toggleButton.disabled = true;
        
        fetch(`/toggle_mode/${phoneNumber}`, {
            method: 'POST'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao alterar modo: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Atualiza a interface com o novo modo
                const newMode = result.mode;
                
                if (toggleButton) {
                    toggleButton.className = newMode === 'human' ? 'human-mode' : 'auto-mode';
                    toggleButton.innerHTML = newMode === 'human' ? 
                        '<i class="fas fa-user"></i> Modo Humano' : 
                        '<i class="fas fa-robot"></i> Modo Automático';
                }
                    
                // Atualiza o ícone na lista de conversas
                const convoItem = document.querySelector(`.conversation-item[data-phone="${phoneNumber}"] .mode-toggle`);
                if (convoItem) {
                    convoItem.className = `mode-toggle ${newMode === 'human' ? 'human-mode' : 'auto-mode'}`;
                    convoItem.innerHTML = `<i class="fas ${newMode === 'human' ? 'fa-user' : 'fa-robot'}"></i>`;
                }
                
                alert("Modo alterado para: " + newMode);
                
                // Recarrega a conversa
                if (phoneNumber === currentPhone) {
                    loadConversation(phoneNumber);
                }
            } else {
                alert("Erro ao alterar modo: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao alterar modo:", error);
            alert("Erro ao alterar modo: " + error.message);
        })
        .finally(() => {
            if (toggleButton) toggleButton.disabled = false;
        });
    }
    
    function startNewConversation() {
        const phoneInput = document.getElementById('new-number');
        const phoneNumber = phoneInput.value.trim();
        
        if (!phoneNumber) {
            alert("Digite um número de telefone!");
            return;
        }
        
        // Verifica se a conversa já existe
        const existingConvo = document.querySelector(`.conversation-item[data-phone="${phoneNumber}"]`);
        if (existingConvo) {
            // Se já existe, apenas carrega
            loadConversation(phoneNumber);
            phoneInput.value = '';
            return;
        }
        
        // Define o número atual
        currentPhone = phoneNumber;
        
        // Limpa a entrada
        phoneInput.value = '';
        
        // Inicia a conversa (enviando uma mensagem vazia para criar a conversa)
        const messageInput = document.getElementById('message-input');
        messageInput.value = "Olá! Estou iniciando uma nova conversa.";
        
        // Envia a mensagem
        sendMessage();
    }
    
    function openMediaUpload(type) {
        // Configura o tipo de mídia
        mediaType = type;
        
        // Atualiza o título do modal
        const typeNames = {
            'image': 'Imagem',
            'audio': 'Áudio',
            'video': 'Vídeo',
            'document': 'Documento'
        };
        
        const uploadTitle = document.getElementById('upload-title');
        if (uploadTitle) {
            uploadTitle.textContent = `Enviar ${typeNames[type] || 'Mídia'}`;
        }
        
        // Configura o input de arquivo para aceitar o tipo correto
        const fileInput = document.getElementById('media-file');
        if (fileInput) {
            switch (type) {
                case 'image':
                    fileInput.accept = 'image/*';
                    break;
                case 'audio':
                    fileInput.accept = 'audio/*';
                    break;
                case 'video':
                    fileInput.accept = 'video/*';
                    break;
                case 'document':
                    fileInput.accept = '.pdf,.doc,.docx,.xls,.xlsx,.txt';
                    break;
            }
            
            // Limpa os campos
            fileInput.value = '';
        }
        
        const captionInput = document.getElementById('media-caption');
        if (captionInput) {
            captionInput.value = '';
        }
        
        // Abre o modal
        const modal = document.getElementById('media-upload-modal');
        if (modal) {
            modal.style.display = 'block';
        }
    }
    
    function uploadMedia() {
        if (!currentPhone) {
            alert("Selecione uma conversa primeiro!");
            closeModal();
            return;
        }
        
        const fileInput = document.getElementById('media-file');
        if (!fileInput || !fileInput.files[0]) {
            alert("Selecione um arquivo!");
            return;
        }
        
        const file = fileInput.files[0];
        
        // Cria um FormData para o upload
        const formData = new FormData();
        formData.append('file', file);
        
        // Desabilita o botão durante o upload
        const uploadButton = document.getElementById('upload-media-btn');
        if (uploadButton) uploadButton.disabled = true;
        
        // Faz o upload
        fetch('/upload_media', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Erro ao fazer upload: " + response.statusText);
            }
            return response.json();
        })
        .then(result => {
            if (result.status === 'success') {
                // Armazena as informações da mídia
                mediaInfo = {
                    path: result.media_path,
                    type: result.media_type
                };
                
                // Fecha o modal
                closeModal();
                
                // Preenche o campo de mensagem com a legenda (se houver)
                const caption = document.getElementById('media-caption');
                if (caption && caption.value.trim()) {
                    const messageInput = document.getElementById('message-input');
                    if (messageInput) {
                        messageInput.value = caption.value.trim();
                    }
                }
                
                // Notifica o usuário
                alert("Mídia pronta para envio! Clique em enviar para completar.");
            } else {
                alert("Erro ao fazer upload: " + (result.message || "Erro desconhecido"));
            }
        })
        .catch(error => {
            console.error("Erro ao fazer upload:", error);
            alert("Erro ao fazer upload: " + error.message);
        })
        .finally(() => {
            if (uploadButton) uploadButton.disabled = false;
        });
    }
    
    function closeModal() {
        const modal = document.getElementById('media-upload-modal');
        if (modal) {
            modal.style.display = 'none';
        }
    }
    
    function filterConversations() {
        const searchInput = document.getElementById('search-input');
        if (!searchInput) return;
        
        const searchText = searchInput.value.toLowerCase();
        const conversations = document.querySelectorAll('.conversation-item');
        
        conversations.forEach(convo => {
            const nameElement = convo.querySelector('.name');
            const phoneElement = convo.querySelector('.phone');
            
            if (!nameElement || !phoneElement) return;
            
            const name = nameElement.textContent.toLowerCase();
            const phone = phoneElement.textContent.toLowerCase();
            
            if (name.includes(searchText) || phone.includes(searchText)) {
                convo.style.display = 'flex';
            } else {
                convo.style.display = 'none';
            }
        });
    }
    
    // Variáveis globais para estado
    var currentPhone = null;
    var mediaType = null;
    var mediaInfo = null;
    
    // Log de diagnóstico
    console.log("Funções JavaScript definidas globalmente!");
    </script>
    <!-- FIM DO BLOCO A SER ADICIONADO -->
<!-- FIM DO ARQUIVO: templates\index.html -->

# FIM DO BACKUP - 2025-03-24 16:38:05
